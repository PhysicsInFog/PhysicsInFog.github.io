<!DOCTYPE html>
<head>
	<meta name="viewport" content="width=device-width, initial-scale=1.0">

	<title>Speedcubing Guide | SolveTheCube</title>

	<link rel="canonical" href="speedcubing.htm">
	<meta name="description" content="Impress your friends by solving your Rubik's Cube even faster using the advanced speedcubing method! Learning algorithms has never been more enjoyable!">

	<meta property="og:title" content="SolveTheCube">
	<meta property="og:type" content="website">
	<meta property="og:url" content="https://solvethecube.com/speedcubing/">
	<meta property="og:locale" content="en_GB">
	<meta property="og:image" content="https://solvethecube.com/img/ogimage.png">
	<meta property="og:image:secure_url" content="https://solvethecube.com/img/ogimage.png">
	<meta property="og:image:width" content="590">
	<meta property="og:image:height" content="310">
	<meta property="og:description" content="Impress your friends by solving your Rubik's Cube even faster using the advanced speedcubing method! Learning algorithms has never been more enjoyable!">

	<link rel="apple-touch-icon" sizes="57x57" href="img/favicon/apple-touch-icon-57x57.png">
	<link rel="apple-touch-icon" sizes="60x60" href="img/favicon/apple-touch-icon-60x60.png">
	<link rel="apple-touch-icon" sizes="72x72" href="img/favicon/apple-touch-icon-72x72.png">
	<link rel="apple-touch-icon" sizes="76x76" href="img/favicon/apple-touch-icon-76x76.png">
	<link rel="apple-touch-icon" sizes="114x114" href="img/favicon/apple-touch-icon-114x114.png">
	<link rel="apple-touch-icon" sizes="120x120" href="img/favicon/apple-touch-icon-120x120.png">
	<link rel="apple-touch-icon" sizes="144x144" href="img/favicon/apple-touch-icon-144x144.png">
	<link rel="apple-touch-icon" sizes="152x152" href="img/favicon/apple-touch-icon-152x152.png">
	<link rel="apple-touch-icon" sizes="180x180" href="img/favicon/apple-touch-icon-180x180.png">
	<link rel="icon" type="image/png" href="img/favicon/favicon-32x32.png" sizes="32x32">
	<link rel="icon" type="image/png" href="img/favicon/android-chrome-192x192.png" sizes="192x192">
	<link rel="icon" type="image/png" href="img/favicon/favicon-96x96.png" sizes="96x96">
	<link rel="icon" type="image/png" href="img/favicon/favicon-16x16.png" sizes="16x16">
	<link rel="manifest" href="https://solvethecube.com/img/favicon/manifest.json">
	<meta name="msapplication-TileColor" content="#2d89ef">
	<meta name="msapplication-TileImage" content="/mstile-144x144.png">
	<meta name="theme-color" content="#3d91b0">

	<link rel="stylesheet" href="css/app.css">

	<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
	<script>
		(adsbygoogle = window.adsbygoogle || []).push({
	 		google_ad_client: "ca-pub-9188691407769749",
			enable_page_level_ads: true
		});
	</script>

	<script src="https://use.fontawesome.com/954f19bfd9.js"></script>
</head>

<body class="show-popup navbar-active">

<!-- Google Tag Manager -->
<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-MVMFDR"
height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'//www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-MVMFDR');</script>
<!-- End Google Tag Manager -->

<nav id="menu" class="animated">
	<a id="menu-button" class="menu-button">
		<div class="close">
			<div></div>
			<div></div>
		</div>
	</a>

	<div class="menu-content">
		<a class="logo" href="solvethecube_default_2.html">
			<img src="img/logo.png" width="50" height="58" alt="SolveTheCube">
		</a>

		<ul>
			<li><a href="solvethecube_default_2.html" >Beginners</a></li>
			<li><a href="speedcubing.htm" class="active">Speedcubing</a></li>
			<li><a href="algorithms.htm" >Algorithms</a></li>
			<li><a href="timer.htm" >Timer</a></li>
			<li><a href="notation.htm" >Notation</a></li>
			<li><a href="faq.htm" >FAQ</a></li>
			<li><a href="contact.htm" >Contact</a></li>
		</ul>

		<div class="menu-bottom">
			<div class="addthis_sharing_toolbox"></div>

			<div id="popup-toggle">
				<span>Algorithm helper</span>

				<div class="switch">
					<input class="switch-input" id="popupSwitch" type="checkbox" name="popupSwitch" checked>
					<label class="switch-paddle" for="popupSwitch">
						<span class="show-for-sr">Toggle algorithm helper</span>
					</label>
				</div>
			</div>
		</div>
	</div>

	<div id="menu-open"></div>
</nav>

<div id="menu-close"></div>

<div class="body">

	<div class="row">
		<div class="small-12 columns">
			<div class="header">
				<a id="header-menu-button" class="menu-button animated">
					<div class="open">
						<div></div>
						<div></div>
						<div></div>
					</div>
					<div class="close">
						<div></div>
						<div></div>
					</div>
				</a>

				<a class="header-logo" href="solvethecube_default_2.html">
					<img src="img/title.png" width="600" height="125" alt="SolveTheCube">
				</a>
			</div>
		</div>
	</div>

<div id="navbar">
	<div class="line"></div>

	<ul>
		<li><a href="speedcubing.htm#step1" title="The Cross"><img class="cube" src="img/cubes/xxxxyxxxxxxxxbxxbxxxxxrxxrx.png" width="100" height="100"></a></li>
		<li><a href="speedcubing.htm#step2" title="F2L"><img class="cube" src="img/cubes/xxxxyxxxxxxxbbbbbbxxxrrrrrr.png" width="100" height="100"></a></li>
		<li><a href="speedcubing.htm#step3" title="OLL Edges"><img class="cube" src="img/cubes/xyxyyyxyxxxxbbbbbbxxxrrrrrr.png" width="100" height="100"></a></li>
		<li><a href="speedcubing.htm#step4" title="OLL Corners"><img class="cube" src="img/cubes/yyyyyyyyyxxxbbbbbbxxxrrrrrr.png" width="100" height="100"></a></li>
		<li><a href="speedcubing.htm#step5" title="PLL Corners"><img class="cube" src="img/cubes/yyyyyyyyybxbbbbbbbrxrrrrrrr.png" width="100" height="100"></a></li>
		<li><a href="speedcubing.htm#step6" title="PLL Edges"><img class="cube" src="img/cubes/yyyyyyyyybbbbbbbbbrrrrrrrrr.png" width="100" height="100"></a></li>
	</ul>
</div>

<div class="row">
	<div class="small-12 columns">
		<h1>Speedcubing Guide</h1>
		<p>So you've gone through the beginner's method a few times, and maybe you can solve the cube unaided every time. Maybe you're even getting pretty good, and can consistently do it in under 2 minutes. But now you're hooked. You aren't satisfied with people standing around for 2 minutes while you solve it because that guy at the office didn't believe you. You want to be one of <em>those</em> people, who can just look at a cube, and ten seconds later boom, it's done. You want a taste of the high-flying, rock and roll lifestyle of the speedcuber. Well here is where your journey begins.</p>

		<!-- Responsive Ad -->
		<ins class="adsbygoogle banner-to-rectangle"
		     style="display:block"
		     data-ad-client="ca-pub-9188691407769749"
		     data-ad-slot="7797180701"
		     data-ad-format="auto"></ins>
		<script>
		(adsbygoogle = window.adsbygoogle || []).push({});
		</script>

		<p>This guide takes you through every step of the CFOP speedcubing method. The name CFOP comes from the steps involved (Cross, F2L, OLL, PLL), and you may also see it referred to as the Fridrich method (after Jessica Fridrich, who helped turn it into the most popular speedcubing technique). Learning and practising this method can take you all the way to the top of the game - it is used by a lot of the top speedcubers to set world records, including the current staggeringly low time of <em>4.9 seconds</em>.</p>

		<p>Full CFOP takes some dedication. If you've just arrived at this website looking to learn how to solve a Rubik's Cube and thought to yourself "Beginner my left foot, I'm starting with the <em>speed</em>cubing guide, that sounds fast", then I warn you now: here be dragons. It is the greatest oak that has the strongest roots, and you'll grow your roots using the <a href="solvethecube_default_2.html">beginner's guide</a>. Go on, I'll wait right here.</p>

		<p>Are you back? Good. Now that you know the beginner method, you can begin to introduce the concepts in this guide into your solves. You needn't go through the steps in order - you can learn and practise each bit independently, falling back on the beginner method as and when you need it.</p>

		<p>Let's jump in!</p>

		<!-- Responsive Ad -->
		<ins class="adsbygoogle horizontal"
		     style="display:block"
		     data-ad-client="ca-pub-9188691407769749"
		     data-ad-slot="7797180701"
		     data-ad-format="auto"
		     data-ad-format="horizontal"></ins>
		<script>
		(adsbygoogle = window.adsbygoogle || []).push({});
		</script>

		<section> <h2 id="step1">Step 1 - The Cross</h2>
			<p>This step is the same as the beginner method - forming a cross on the first layer to get this:</p>

			<img class="cube" src="img/cubes/xxxxyxxxxxxxxbxxbxxxxxrxxrx.png" width="100" height="100">

			<p>But not exactly the same, as you'll have noticed - the cube is upside down. Indeed, the whole cross is assembled on the bottom layer instead of the top. This will be awkward the first few times you attempt it, but it is certainly worth practising. Not having to turn the cube over after completing the cross on the top layer saves a lot of time, and it also means that you can be looking for the pieces for the next step whilst completing the cross on the bottom.</p>

			<p>At this stage, a lot of people still find it quite difficult to intuitively manipulate the cube. This means that doing the cross on the bottom is difficult, as they have come to rely on algorithms for situations that are suddenly upside-down. It is difficult to teach intuition, but through practice it should eventually just 'click' in your head. If doing the cross on the bottom takes much longer than when doing it on the top, don't be disheartened! It does take time to get used to, and it doesn't really matter how long you take when you're practising.</p>

			<p>As mentioned above, the sections in this method don't have to be learned sequentially. Move on to the next sections, but keep starting with the cross on the bottom. I have found that the next step (F2L) is a huge help for people to understand how to move cubies to where they want them, a skill that they can later use when returning to the cross.</p>

			<p>All of that being said, I can give you some situations to hopefully make the process easier. In this example:</p>

			<img class="cube" src="img/cubes/xxxxyrxwxxbxxbxxxxxwxxrxxxx.png" width="100" height="100">

			<p>It should be obvious to you that you can simply do F2 to correctly place the white-blue edge piece on the bottom layer. But you could also place the white-red piece by doing this:</p>

			<div class="alg"><img src="img/cubes/xxxxyrxwxxbxxbxxxxxwxxrxxxx.png" width="100" height="100"><span class="steps"><span data-popup="xxxxyrxxxxxxxbbxxxxwxwrxxxx">F</span>&nbsp;<span data-popup="xxxxyxxrxxwxxbbxxxxxxwrxxxx">U</span>&nbsp;<span data-popup="xxxxyxxxxxxxxbwxbxxxxrrxxxx">F</span>&nbsp;<span data-popup="xxxxyxxxxxxxxbxxbxxxxxrxxrx">R'</span></span></div>

			<p>Something else to bear in mind is that you don't always need to put the edge pieces in the correct place straight away. Consider this situation, and the two approaches to solving it:</p>

			<div class="row">
				<div class="small-12 medium-6 large-5 columns">
					<div class="alg"><img src="img/cubes/xxxxywxxxxxxxbrxxxxgxwrxxxx.png" width="100" height="100"><span class="steps"><span data-popup="xwxxyxxxxxxxxbrxxxxxxwrxxxx">U'</span>&nbsp;<span data-popup="xxxxyxxxxxxxxbrxxxxxxwrxxxx">B2</span>&nbsp;<span data-popup="xxxxyxxwxxrxxbxxxxxxxxrxxxx">F'</span>&nbsp;<span data-popup="xxxxywxxxxxxxbxxxxxrxxrxxxx">U'</span>&nbsp;<span data-popup="xxxxyxxxxxxxxbxxxxxxxxrxxrx">R2</span></span></div>
				</div>
				<div class="small-12 medium-6 large-5 columns end">
					<div class="alg"><img src="img/cubes/xxxxywxxxxxxxbrxxxxgxwrxxxx.png" width="100" height="100"><span class="steps"><span data-popup="xxxxywxxxxxxxbxxrxxgxxrxxxx">F</span>&nbsp;<span data-popup="xxxxyxxxxxxxxbxxrxxxxxrxxgx">R2</span>&nbsp;<span data-popup="xxxxyxxxxxxxxbxxxxxxxxrxxrx">D</span></span></div>
				</div>
			</div>

			<p>The first approach involves taking each edge piece, putting it above where it needs to go, and turning the appropriate face twice to place the piece on the bottom layer. This works, and is an intuitive way to solve the problem, but the second solution is much simpler. It simply solves each piece <em>relative to each other</em>, and then places them in one go. So instead of producing the cross by finding each white edge piece and solving them one by one, what you actually want to be doing is solving each piece at the same time in an efficient way.</p>

			<p>You might think that this sounds quite challenging, and you'd be right. But what is life without a bit of a challenge every now and then. If you are thinking "how the dickens is anyone supposed to do this in 4.9 seconds", then the answer is twofold: practice, and <strong>inspection time</strong>. <a href="https://www.worldcubeassociation.org/regulations/#A3a1">World Cube Association Regulation A3a1</a> states that a competitor has up to 15 seconds of inspection time before attempting a solve, and you would want to be spending this time mentally formulating a complete solution to the cross which you could then execute very quickly at the start of your solve. Of course, when you're just sat at home on a lazy Sunday idling the afternoon away with a Rubik's Cube you likely won't be paying much attention to official WCA competition rules, but it does give you something to aim for. Why don't you give it a try - go to the <a href="timer.htm">timer page</a>, set inspection time to 15 seconds and see if you can produce a solution to the cross entirely in your head. It can be quite difficult (certainly so if you've only just started doing it upside down) but with practice it will become very easy to isolate only the four edge pieces you need and formulate a basic plan to get them into a cross.</p>
		</section>

		<section> <h2 id="step2">Step 2 - F2L</h2>
			<p>The next step is to solve the rest of the first two layers (which is what F2L stands for) at the same time, to get this:</p>

			<img class="cube" src="img/cubes/xxxxyxxxxxxxbbbbbbxxxrrrrrr.png" width="100" height="100">

			<p>The idea of F2L is to pair each of the four bottom layer corners with the corresponding edge piece and then insert them into the correct place. Here's a simple example:</p>

			<div class="alg"><img src="img/cubes/xbxxyxxxrxxbxbxxbxwxxxrxxrx.png" width="100" height="100"><span class="steps"><span data-popup="xbbxyxxxxxxxxbwxbxxxwrrxxxx">R</span>&nbsp;<span data-popup="xxxxybxxbxxwxbwxbxrrxrrxxxx">U</span>&nbsp;<span data-popup="xxxxyxxxxxxxxbbxbbxxxrrxrrx">R'</span></span></div>

			<p>The corner piece is paired with the edge piece, and the pair is inserted into the right place. Easy peasy. There are, however, a few situations you might find yourself in where this procedure is not quite so obvious. Here's a similar example:</p>

			<div class="alg"><img src="img/cubes/xxxxybwxxbxxxbxxbxxrxxrxxrx.png" width="100" height="100"><span class="steps">(<span class="no-margin-left"data-popup="xxxxyxwxxbxxxbwxbxxxxrrrxxx">R</span>&nbsp;<span data-popup="xxwxyxxxxxxxxbwxbxxxrrrrxxx">U2</span>&nbsp;<span class="no-margin-right"data-popup="xxxxybxxbxxwxbxxbxrrxxrxxrx">R'</span>) (<span class="no-margin-left"data-popup="xxxxyxbbxrrxxbxxbxxxxxrxxrx">U</span>&nbsp;<span data-popup="xxxxyxbbxrrxxbwxbxxxxrrxxxx">R</span>&nbsp;<span data-popup="xxxxybxxbxxwxbwxbxrrxrrxxxx">U'</span>&nbsp;<span class="no-margin-right"data-popup="xxxxyxxxxxxxxbbxbbxxxrrxrrx">R'</span>)</span></div>

			<p>This can't be solved as simply, but the idea is exactly the same. The two sections of the algorithm show the two steps in the same procedure as before - the first bracketed section shows the pairing of the two cubies, and the second section shows the pair being inserted correctly. You simply repeat these steps for each of the four corners, and solve each F2L pair in turn.</p>

			<p>The important part of F2L is being able to solve each of the pairs without affecting any of the other previously solved pairs. For example, here are two ways of pairing the corner and edge pieces:</p>

			<div class="row">
				<div class="small-12 medium-6 large-5 columns">
					<div class="alg"><img src="img/cubes/xxxbyxxxbxxwbbxbbxrxxxrxxrx.png" width="100" height="100"><span class="steps"><span data-popup="xxxbyxooxbbxbbxxxwxxxxrxbrx">F</span>&nbsp;<span data-popup="xooxybxxxxxxbbxxxwxrwxrxbrx">U2</span>&nbsp;<span data-popup="xooxybxxbxxwxbxxbxrrwxrxxrx">F'</span></span></div>
				</div>
				<div class="small-12 medium-6 large-5 columns end">
					<div class="alg"><img src="img/cubes/xxxbyxxxbxxwbbxbbxrxxxrxxrx.png" width="100" height="100"><span class="steps"><span data-popup="xxbxyxxbxxrxbbxbbxxxwxrxxrx">U'</span>&nbsp;<span data-popup="xxxxyxxbxxrxbbwbbxxxxrrxxxw">R</span>&nbsp;<span data-popup="xbxxyxxxxxxxbbwbbxxxxrrxxxw">U2</span>&nbsp;<span data-popup="xbbxyxxxxxxxbbxbbxxxwxrxxrx">R'</span></span></div>
				</div>
			</div>

			<p>The first algorithm does successfully pair the red-blue corner and edge pieces, but it also lifts out the blue-orange pair from its proper place, thereby undoing any hard work it took to put it there. Instead, a simple U' before the algorithm means that when you then pair the red-blue corner and edge piece, you avoid affecting the blue-orange pair. Instead, the pieces that do get affected are ones you don't care about, as they were occupying the space that you want to put the red-blue pair into.</p>

			<p>This idea of finding an empty space on the cube and using it to build a corner-edge pair is crucial to F2L, as of course you want to be able to construct each of the four F2L pairs without disturbing any previously solved ones. But sometimes it can be advantageous to disturb unsolved spaces by choosing a space to build your corner-edge pair that also assists the creation of the next pair. For example:</p>

			<div class="row">
				<div class="small-12 medium-6 large-5 columns">
					<div class="alg"><img src="img/cubes/xbxxyxrxxwxxxrgxrgxxxrgxwgx.png" width="100" height="100"><span class="steps"><span data-popup="xxxbyxxxrxxbxrgxrgwxxrgxwgx">U'</span>&nbsp;<span data-popup="xxxbyxxxxxxxrrxggbxxxxgxrgx">F</span>&nbsp;<span data-popup="xbxxyxxxxxxxrrxggbxxxxgxrgx">U</span>&nbsp;<span data-popup="xbxxyxxxrxxbxrgxrgwxxrgxwgx">F'</span>&nbsp;<span data-popup="xxxxybrxxwxxxrgxrgxrxrgxwgx">U</span></span></div>
				</div>
				<div class="small-12 medium-6 large-5 columns end">
					<div class="alg"><img src="img/cubes/xbxxyxrxxwxxxrgxrgxxxrgxwgx.png" width="100" height="100"><span class="steps"><span data-popup="xbxxyxxrwxggxrrwxxrxxwgxxgx">F'</span>&nbsp;<span data-popup="xxxrybwxxrxxxrrwxxxrxwgxxgx">U</span>&nbsp;<span data-popup="xxxrybrxgwxrxrxxrxwrxxgxxgx">F</span></span></div>
				</div>
			</div>

			<p>In this situation, the first algorithm uses the empty space between the red and blue faces to move the red-blue edge piece so it can be easily paired and inserted. This doesn't disturb any of the other F2L spaces, but you can see that the red-green pieces are looking rather unsolved and unhappy. If you used the second algorithm instead, then the same thing happens to red-blue corner and edge pieces, but now the red-green pieces are much happier and are in a position to be solved much more easily.</p>

			<p>You now know the basic ideas of F2L. Have a go on your cube, and see if you can work out how to solve any of the pairs. Rather than relying on a big table of algorithms, F2L is best done <em>intuitively</em>. This is for the same reason as the cross in step 1 - you need to be able to look at the cube and produce an efficient way of solving each F2L pair. Just like with the happy red-green pieces before, sometimes you will come to an F2L situation that you've solved many times, but solve it in a different way because you want to set up the next F2L pair for easy solving.</p>

			<p>However, there is such a list on the <a href="algorithms.htm#f2l">algorithms page</a>, where you can see each F2L case and how to solve it. They are there so you can see an optimal way to solve each case, but try to not rely on them for every single F2L case you encounter. Instead, really try and solve each case intuitively. Don't worry if you struggle! It takes practise, and the next little section is all about how to be better at F2L.</p>

			<h3 id="betterf2l">How to be better at F2L</h3>
			<p>F2L can be a little difficult to get your head around. Even if you understand the basic ideas above, it isn't always obvious how best to proceed. I shall now try to explain some further concepts that you can use to improve your F2L.</p>

			<h4>1. Intuition isn't always best</h4>
			<p>I know, I know, I said that F2L should be solved <em>intuitively</em>, and that you shouldn't rely on a big table of algorithms. If you can intuitively solve every F2L situation you come across then jolly well done, but there are a few cases where there is just a better, faster, much less obvious algorithm to solve it. For example, consider the following two algorithms:</p>

			<div class="row">
				<div class="small-12 medium-6 large-5 columns">
					<div class="alg"><img src="img/cubes/xxxxyxxxwxxrxbbxbxbxxrrxxrx.png" width="100" height="100"><span class="steps">(<span class="no-margin-left"data-popup="xxrxybxxxxxxxbwxbxxrbrrxxxx">R</span>&nbsp;<span data-popup="xxxbyxrxxwxxxbwxbxxxxrrxxxx">U2</span>&nbsp;<span class="no-margin-right"data-popup="xxxbyxrxxwxxxbxxbxxxxxrxxrx">R'</span>) (<span class="no-margin-left"data-popup="xxxbyxxxxxxxxbbwxxxxxwrxxrx">F'</span>&nbsp;<span data-popup="xxxxybxxxxxxxbbwxxxrxwrxxrx">U2</span>&nbsp;<span class="no-margin-right"data-popup="xxxxybrxxwxxxbxxbxxrxxrxxrx">F</span>) (<span class="no-margin-left"data-popup="xbxxyxxxrxxbxbxxbxwxxxrxxrx">U'</span>&nbsp;<span data-popup="xbbxyxxxxxxxxbwxbxxxwrrxxxx">R</span>&nbsp;<span data-popup="xxxxybxxbxxwxbwxbxrrxrrxxxx">U</span>&nbsp;<span class="no-margin-right"data-popup="xxxxyxxxxxxxxbbxbbxxxrrxrrx">R'</span>)</span></div>
				</div>
				<div class="small-12 medium-6 large-5 columns end">
					<div class="alg"><img src="img/cubes/xxxxyxxxwxxrxbbxbxbxxrrxxrx.png" width="100" height="100"><span class="steps">(<span class="red no-margin-left"data-popup="xxrxybxxxxxxxbwxbxxrbrrxxxx">R</span>&nbsp;<span class="red" data-popup="xxxxyxxbrxrbxbwxbxwxxrrxxxx">U</span>&nbsp;<span class="red" data-popup="xxxxyxxbxxrxxbxxbrxxxxrxwrx">R'</span>&nbsp;<span class="red no-margin-right"data-popup="xxxxybxxxxxxxbxxbrxrxxrxwrx">U'</span>) (<span class="red no-margin-left"data-popup="xxxxyxxxrxxbxbwxbxwxxrrrxxx">R</span>&nbsp;<span class="red" data-popup="xxxxyxrxxwxxxbwxbxxxxrrrxxx">U</span>&nbsp;<span class="red" data-popup="xxxxybrxxwxxxbxxbxxrxxrxxrx">R'</span>&nbsp;<span class="red no-margin-right"data-popup="xbxxyxxxrxxbxbxxbxwxxxrxxrx">U'</span>) (<span class="no-margin-left"data-popup="xbbxyxxxxxxxxbwxbxxxwrrxxxx">R</span>&nbsp;<span data-popup="xxxxybxxbxxwxbwxbxrrxrrxxxx">U</span>&nbsp;<span class="no-margin-right"data-popup="xxxxyxxxxxxxxbbxbbxxxrrxrrx">R'</span>)</span></div>
				</div>
			</div>

			<p>An intuitive way of thinking about this situation might produce something like the first algorithm, as it follows the usual principles of pairing the edge and corner piece and inserting them together. However, the second algorithm is much faster to perform, as it is essentially the same few moves performed three times. You will also have noticed that the first two brackets are written in red. This is because (<span class="red">R U R' U'</span>) is well-known 'trigger' called the <strong>Sexy Move</strong>. I'm not even kidding. A trigger is simply a sequence of moves that is easy to perform very quickly, and the Sexy Move trigger comes up a lot. Being able to identify it easily will make algorithms that use it easier to learn, so whenever it is used in this guide it will be highlighted in red. This is also why you'll see things like (<span class="red">R U R' U'</span>) U', even though you might think it could just be (R U R' U2). It's easier to perform the quick trigger first and then add on the U', as opposed to modifying a well-practised sequence.</p>

			<p>There are five such cases that you should learn the algorithmic solution for, and they're all in this nice little table:</p>

			<div class="alg-table">
				<h5 class="titlebox">That nice little table</h5>
				<div class="alg"><img src="img/cubes/xxxxyxxxwxxrxbbxbxbxxrrxxrx.png" width="100" height="100"><span class="steps">(<span class="red no-margin-left"data-popup="xxrxybxxxxxxxbwxbxxrbrrxxxx">R</span>&nbsp;<span class="red" data-popup="xxxxyxxbrxrbxbwxbxwxxrrxxxx">U</span>&nbsp;<span class="red" data-popup="xxxxyxxbxxrxxbxxbrxxxxrxwrx">R'</span>&nbsp;<span class="red no-margin-right"data-popup="xxxxybxxxxxxxbxxbrxrxxrxwrx">U'</span>) (<span class="red no-margin-left"data-popup="xxxxyxxxrxxbxbwxbxwxxrrrxxx">R</span>&nbsp;<span class="red" data-popup="xxxxyxrxxwxxxbwxbxxxxrrrxxx">U</span>&nbsp;<span class="red" data-popup="xxxxybrxxwxxxbxxbxxrxxrxxrx">R'</span>&nbsp;<span class="red no-margin-right"data-popup="xbxxyxxxrxxbxbxxbxwxxxrxxrx">U'</span>) (<span class="no-margin-left"data-popup="xbbxyxxxxxxxxbwxbxxxwrrxxxx">R</span>&nbsp;<span data-popup="xxxxybxxbxxwxbwxbxrrxrrxxxx">U</span>&nbsp;<span class="no-margin-right"data-popup="xxxxyxxxxxxxxbbxbbxxxrrxrrx">R'</span>)</span></div>
				<div class="alg"><img src="img/cubes/xxxxyxxbwxrrxbxxbxbxxxrxxrx.png" width="100" height="100"><span class="steps">(<span class="red no-margin-left"data-popup="xxrxyxxbxxrxxbwxbxxxbrrxxxx">R</span>&nbsp;<span class="red" data-popup="xxxbyxxxrxxbxbwxbxwxxrrxxxx">U</span>&nbsp;<span class="red" data-popup="xxxbyxxxxxxxxbxxbrxxxxrxwrx">R'</span>&nbsp;<span class="red no-margin-right"data-popup="xxxxyxxbxxrxxbxxbrxxxxrxwrx">U'</span>) <span data-popup="xxxxybxxxxxxxbxxbrxrxxrxwrx">U'</span>&nbsp;(<span class="red no-margin-left"data-popup="xxxxyxxxrxxbxbwxbxwxxrrrxxx">R</span>&nbsp;<span class="red" data-popup="xxxxyxrxxwxxxbwxbxxxxrrrxxx">U</span>&nbsp;<span class="red" data-popup="xxxxybrxxwxxxbxxbxxrxxrxxrx">R'</span>&nbsp;<span class="red no-margin-right"data-popup="xbxxyxxxrxxbxbxxbxwxxxrxxrx">U'</span>) (<span class="no-margin-left"data-popup="xbbxyxxxxxxxxbwxbxxxwrrxxxx">R</span>&nbsp;<span data-popup="xxxxybxxbxxwxbwxbxrrxrrxxxx">U</span>&nbsp;<span class="no-margin-right"data-popup="xxxxyxxxxxxxxbbxbbxxxrrxrrx">R'</span>)</span></div>
				<div class="alg"><img src="img/cubes/xxxxyrxxwxxrxbxxbxbbxxrxxrx.png" width="100" height="100"><span class="steps"><span data-popup="xrwxyxxxxxxxxoxxoxxxrxbxxbx">y'</span>&nbsp;(<span class="no-margin-left"data-popup="xrxxyxxxbxxwxoxxoxrxxxbbxxx">R'</span>&nbsp;<span data-popup="xxbryxxxxxxxxoxxoxxxwxbbxxx">U'</span>&nbsp;<span data-popup="xxxryxxxxxxxxoxxoxxxxxbxxbw">R</span>&nbsp;<span class="no-margin-right"data-popup="xrxxyxxxxxxxxoxxoxxxxxbxxbw">U</span>) <span data-popup="xxxxyrxxxxxxxoxxoxxbxxbxxbw">U</span>&nbsp;(<span class="no-margin-left"data-popup="xxbxyxxxxxxxxorxoxxxwbbbxxx">R'</span>&nbsp;<span data-popup="bxxxyxxxxxxxxorxoxxxxbbbxxx">U'</span>&nbsp;<span data-popup="bxxxyrxxxxxxxoxxoxxbxxbxxbx">R</span>&nbsp;<span class="no-margin-right"data-popup="xxbxyxxrxxbxxoxxoxxxwxbxxbx">U</span>) (<span class="no-margin-left"data-popup="xxxxyxxrrxbbxoxxoxwxxxbbxxx">R'</span>&nbsp;<span data-popup="xxrxyrxxxxxxxoxxoxxbbxbbxxx">U'</span>&nbsp;<span class="no-margin-right"data-popup="xxxxyxxxxxxxxoxxoxxxxxbbxbb">R</span>)</span></div>
				<div class="alg"><img src="img/cubes/xxxxyxxxxxxxxbrxbrxxxbrxwrx.png" width="100" height="100"><span class="steps">(<span class="red no-margin-left"data-popup="xxxxyrxxrxxbxbwxbxwbxrrxxxx">R</span>&nbsp;<span class="red" data-popup="xxxxyxrrxwbxxbwxbxxxxrrxxxx">U</span>&nbsp;<span class="red" data-popup="xxxxyxrrxwbxxbxxbxxxxxrxxrx">R'</span>&nbsp;<span class="red no-margin-right"data-popup="xxxxyrxxrxxbxbxxbxwbxxrxxrx">U'</span>) (<span class="no-margin-left"data-popup="xxbxyxxxxxxxxbwxbxxxwrrbxxx">R</span>&nbsp;<span data-popup="bxxxyxxxxxxxxbwxbxxxxrrbxxx">U'</span>&nbsp;<span class="no-margin-right"data-popup="bxxxyrxxxxxxxbxxbxxbxxrxxrx">R'</span>) <span data-popup="xxbxyxxrxxbxxbxxbxxxwxrxxrx">U</span>&nbsp;<span data-popup="xxbxyxxrxxbxxoxxoxxxwxbxxbx">d</span>&nbsp;(<span class="no-margin-left"data-popup="xxxxyxxrrxbbxoxxoxwxxxbbxxx">R'</span>&nbsp;<span data-popup="xxrxyrxxxxxxxoxxoxxbbxbbxxx">U'</span>&nbsp;<span class="no-margin-right"data-popup="xxxxyxxxxxxxxoxxoxxxxxbbxbb">R</span>)</span></div>
				<div class="alg"><img src="img/cubes/xxxxyxxxxxxxxbrxbwxxxbrxbrx.png" width="100" height="100"><span class="steps">(<span class="no-margin-left"data-popup="xxxxyrxxwxxrxbwxbxbbxrrxxxx">R</span>&nbsp;<span data-popup="xrwxyxxxxxxxxbwxbxxxrrrxxxx">U'</span>&nbsp;<span class="no-margin-right"data-popup="xrxxyxxxbxxwxbxxbxrxxxrxxrx">R'</span>) <span data-popup="xrxxyxxxbxxwxoxxoxrxxxbxxbx">d</span>&nbsp;(<span class="no-margin-left"data-popup="xrxxyxxxxxxxxoxxobxxxxbbrxx">R'</span>&nbsp;<span data-popup="xxxryxxxxxxxxoxxobxxxxbbrxx">U'</span>&nbsp;<span data-popup="xxxryxxxbxxwxoxxoxrxxxbxxbx">R</span>&nbsp;<span class="no-margin-right"data-popup="xxbxyxxrxxbxxoxxoxxxwxbxxbx">U'</span>) (<span class="no-margin-left"data-popup="xxxxyxxrrxbbxoxxoxwxxxbbxxx">R'</span>&nbsp;<span data-popup="xxrxyrxxxxxxxoxxoxxbbxbbxxx">U'</span>&nbsp;<span class="no-margin-right"data-popup="xxxxyxxxxxxxxoxxoxxxxxbbxbb">R</span>)</span></div>
			</div>

			<h4>2. Cube rotations are bad</h4>

			<p>Turning the whole cube in your hands is a slow waste of time. Wasting time is bad. Therefore, rotate the cube as little as possible. This might seem like a trivial difference to you, but each little pause adds up, and when you're trying to really push down your solve time every second counts. To this end, the vast majority of the algorithms on this page are comprised of many Rs and Us, as they are easy to perform (sorry lefties). They also tend to use more double layer turns like d as opposed U y'. Both have the same effect, but a double layer turn is quicker. Compare these two algorithms:</p>

			<div class="row">
				<div class="small-12 medium-6 large-5 columns">
					<div class="alg"><img src="img/cubes/xxbryxxxxxxxxbxxbxxxwxrxxrx.png" width="100" height="100"><span class="steps">(<span class="no-margin-left"data-popup="xxxryxxxxxxxxbwxbxxxxrrxxxw">R</span>&nbsp;<span data-popup="xxxxyxxrxxbxxbwxbxxxxrrxxxw">U'</span>&nbsp;<span class="no-margin-right"data-popup="xxbxyxxrxxbxxbxxbxxxwxrxxrx">R'</span>) <span data-popup="xxxryxxxbxxwxbxxbxrxxxrxxrx">U</span>&nbsp;(<span class="no-margin-left"data-popup="xxxryxrxxwxxxbbxxxxxxwrxxrx">F'</span>&nbsp;<span data-popup="xxxxyxxrrxbbxbbxxxwxxwrxxrx">U'</span>&nbsp;<span class="no-margin-right"data-popup="xxxxyxxxxxxxxbbxbbxxxrrxrrx">F</span>)</span></div>
				</div>
				<div class="small-12 medium-6 large-5 columns end">
					<div class="alg"><img src="img/cubes/xxbryxxxxxxxxbxxbxxxwxrxxrx.png" width="100" height="100"><span class="steps">(<span class="no-margin-left"data-popup="xxxryxxxxxxxxbwxbxxxxrrxxxw">R</span>&nbsp;<span data-popup="xxxxyxxrxxbxxbwxbxxxxrrxxxw">U'</span>&nbsp;<span class="no-margin-right"data-popup="xxbxyxxrxxbxxbxxbxxxwxrxxrx">R'</span>) <span data-popup="xxbxyxxrxxbxxoxxoxxxwxbxxbx">d</span>&nbsp;(<span class="no-margin-left"data-popup="xxxxyxxrrxbbxoxxoxwxxxbbxxx">R'</span>&nbsp;<span data-popup="xxrxyrxxxxxxxoxxoxxbbxbbxxx">U'</span>&nbsp;<span class="no-margin-right"data-popup="xxxxyxxxxxxxxoxxoxxxxxbbxbb">R</span>)</span></div>
				</div>
			</div>

			<p>Both algorithms solve the F2L pair and use the same number of moves. But the second algorithm is considerably quicker to perform, as you don't have to adjust your hand position at all. The first algorithm either requires you to shift your hand position to twist the F face or start using some peculiar thumb movements.</p>

			<p>Try to also remember that you (probably) have two hands. While this is also an excellent life tip, some situations are just better handled on a specific side of the cube. Take this example:</p>

			<div class="row">
				<div class="small-12 medium-6 large-5 columns">
					<div class="alg"><img src="img/cubes/xxbryxxxxxxxxrrxrrxxwgggggg.png" width="100" height="100"><span class="steps"><span data-popup="bxxxyxxrxxbxbbxbbxxxxxrrxrr">y'</span>&nbsp;<span data-popup="xxbryxxxxxxxbbxbbxxxwxrrxrr">U</span>&nbsp;<span data-popup="xxxryxxxxxxxbbwbbwxxxrrxrrw">R</span>&nbsp;<span data-popup="xxxxyxxrxxbxbbwbbwxxxrrxrrw">U'</span>&nbsp;<span data-popup="xxbxyxxrxxbxbbxbbxxxwxrrxrr">R'</span>&nbsp;<span data-popup="xxxryxxxbxxwbbxbbxrxxxrrxrr">U</span>&nbsp;<span data-popup="xxbxyxxrxxbxooooooxxwbbxbbx">y'</span>&nbsp;<span data-popup="xxxxyxxrrxbbooxooxwxxxbbxbb">R'</span>&nbsp;<span data-popup="xxrxyrxxxxxxooxooxxbbxbbxbb">U'</span>&nbsp;<span data-popup="xxxxyxxxxxxxooooooxxxbbbbbb">R</span></span></div>
				</div>
				<div class="small-12 medium-6 large-5 columns end">
					<div class="alg"><img src="img/cubes/xxbryxxxxxxxxrrxrrxxwgggggg.png" width="100" height="100"><span class="steps">(<span class="no-margin-left"data-popup="xxbxyxxxxxxxwrrwrrxxwgggggg">L'</span>&nbsp;<span data-popup="xxxxyxxxbxxwwrrwrrrxxgggggg">U</span>&nbsp;<span class="no-margin-right"data-popup="xxxryxxxbxxwxrrxrrrxxgggggg">L</span>) <span data-popup="xrxxyxbxxrxxxrrxrrxxxgggggg">U</span>&nbsp;(<span class="no-margin-left"data-popup="rrxxyxxxxxxxwrrwrrxxxgggggg">L'</span>&nbsp;<span data-popup="xxxryxrxxwxxwrrwrrxxxgggggg">U'</span>&nbsp;<span class="no-margin-right"data-popup="xxxxyxxxxxxxrrrrrrxxxgggggg">L</span>)</span></div>
				</div>
			</div>

			<p>Your natural instinct may be to use your right hand, which produces the first algorithm. But just look at it. It's an abomination. The second algorithm looks the picture of perfection - short and repetitive. It's beautiful, and no horrid cube rotations.</p>

			<h4>3. Slow and steady wins the race</h4>
			<p>It's all very well and good being able to perform algorithms quickly, but perhaps the most important thing with F2L is to perform the algorithms <em>continuously</em>. If you perform each algorithm as quickly as humanly possible, you don't leave yourself much time to analyse the cube and isolate the next corner-edge pair you want to solve. This leaves you with a very start-stop, stuttery solve as you rapidly perform an algorithm and then stop to find the next one.</p>

			<p>Instead, it is much better to perform the algorithms slightly more slowly in one continuous stream. This practise is called <strong>lookahead</strong>, and is vital if you want to achieve solve times under 20 seconds. Although the idea of slowing down in order to speed up may be counter-intuitive, a useful exercise is to practise F2L at an exaggeratedly slow speed. Very slow indeed, about 1-2 seconds per quarter turn of a face. At this pace, you remove the temptation to focus only on the pieces that you are currently applying an algorithm to, and you can easily be looking at the rest of the cube to find the next F2L pair.</p>

			<p>This idea does not mean that the previous advice of how to perform the algorithms is redundant. Remember when I said 'wasting time is bad'? That's still true. You want to eliminate wasted time searching for pieces. Going slowly isn't better - going faster is better, but you'll get faster by going slower. Through practice, your lookahead will improve to a point where you can perform every algorithm very quickly, but without losing the ability to know what you're doing next. This advice applies to all of steps in this guide, but it is most important during F2L and step 1, the cross. Try practising going from a scrambled cube to completed F2L very slowly, and making sure you have a continuous steady flow.</p>
		</section>

		<section> <h2 id="step3">Step 3 - OLL Edges</h2>
			<p>Now, when you're solving the cube using the full CFOP method, the whole last layer is supposed to be solved in two steps:</p>

			<ol>
				<li><strong>OLL</strong>, or Orientation of the Last Layer</li>
				<li><strong>PLL</strong>, or Permutation of the Last Layer</li>
			</ol>

			<p>These steps are solved using only one algorithm each. So the first algorithm <em>orients</em> all the last layer pieces (makes them all face the right way, i.e. with yellow on top) and the second <em>permutes</em> them (puts them all in the right places). 'Orientation' always refers to the way a cubie is rotated, and 'permutation' always refers to where it is on the cube. As you might well imagine, this means that full CFOP has a <em>lot</em> of algorithms in it - one for every situation you might encounter. If you clicked the link to the <a href="algorithms.htm">algorithm page</a> before, you'll have seen that the list is indeed quite long. I assure you that the rabbit hole goes even deeper than that, and every situation actually has multiple algorithms for your learning pleasure.</p>

			<p>So instead, what we're going to do, you and I, is cheat a little. It's ok, no one has to know. I'm going to show you a slightly different way of approaching the last layer, so that you only need to know a few algorithms instead. Then, once you know those few algorithms, you can begin to learn the rest of the last layer algorithms while always being able to fall back on the ones you know. What's even better is that these few algorithms are used in the full CFOP method anyway, so we're not wasting any time!</p>

			<p>The way it works is to split up the steps into two smaller steps each. So for OLL, instead of orienting every piece in the last layer at once, we'll do the edges first and then the corners. This is called <strong>2-look OLL</strong>, as it's OLL but done in two steps. Makes sense. PLL gets the same treatment, as we'll be permuting the corners first and then the edges. That's called <strong>2-look PLL</strong>.</p>

			<p>So the first step of 2-look OLL is to orient the edge pieces, like this:</p>

			<img class="cube" src="img/cubes/xyxyyyxyxxxxbbbbbbxxxrrrrrr.png" width="100" height="100">

			<p>This is also called <strong>EOLL</strong>, or Edge Orientation of the Last Layer. It's quite an easy step, as it is essentially the same as <a href="solvethecube_default_2.html#step4">step 4 from the beginner guide</a>, which is to get a cross on the top face. But because you're not a beginner any more, you can be a little clever if you find yourself presented with this:</p>

			<div class="alg"><img src="img/cubes/xxxxyxxxxxyxbbbbbbxyxrrrrrr.png" width="100" height="100"><span class="steps"><span data-popup="xxxxybxxbxywbbwbbwrrxrryrrx">R</span>&nbsp;<span data-popup="bxxbyxxxxxyxbbwbbwxyxrryrrx">U2</span>&nbsp;(<span class="no-margin-left"data-popup="bxgbygxxxxyxbbxbbxxrryrrxyx">R2'</span>&nbsp;<span data-popup="bxgbygooxbbxbbyxxxxrrxrrxyx">F</span>&nbsp;<span data-popup="bxxbyyooxbbxbbxxxxxxxyrrxrr">R</span>&nbsp;<span class="no-margin-right"data-popup="bxxbyyxyxxxxbbxbbxxxxyrrxrr">F'</span>) <span data-popup="xyxyybxxbxywbbxbbxrrxyrrxrr">U2</span>&nbsp;(<span class="blue no-margin-left"data-popup="xygyygxxxxyxbbbbbbxrrrrrryx">R'</span>&nbsp;<span class="blue" data-popup="xygyygooxbbxbbybbxxrrxrrxyx">F</span>&nbsp;<span class="blue" data-popup="xyxyyyooxbbxbbxbbxxxxyrrxrr">R</span>&nbsp;<span class="blue no-margin-right"data-popup="xyxyyyxyxxxxbbbbbbxxxrrrrrr">F'</span>)</span></div>

			<p>If you remember, the beginner method solves a dot situation by using both F U R U' R' F' and F R U R' U' F' and also having to spin the cube about in the middle. Using this algorithm is much faster, as it makes a cross in one go. There are lots of algorithms for doing this, but I like this one the best. Even though you can already solve this case using the beginner way, I would take the time to practise and learn this algorithm now. Not only will it help you speed up whenever you find yourself with a dot on the last layer, but when you see this algorithm again during proper 1-look OLL, you'll feel all smug because you already know it.</p>

			<p>Much like the Sexy Move highlighted in red before, the sequence (<span class="blue">R' F R F'</span>) is a trigger called the Sledgehammer, and you'll spot it lurking about in other places and algorithms. Being able to recognise it and perform it without thinking will make the task of learning lots of algorithms much, much easier.</p>
		</section>

		<section> <h2 id="step4">Step 4 - OLL Corners</h2>
			<p>The next step is to correctly orient the corner cubies:</p>

			<img class="cube" src="img/cubes/yyyyyyyyyxxxbbbbbbxxxrrrrrr.png" width="100" height="100">

			<p>This is called <strong>OCLL</strong>, or Orient Corners of the Last Layer. "Why isn't it called COLL?" I hear you ask. Because it was taken already, that's why. COLL and CLL both mean different things to other cubers, and sticking to convention makes things a lot easier for everyone involved. "I'm going to call it COLL anyway" I hear you petulantly respond. Well go ahead, but don't blame me when you're trying to make friends with other speedcubers and you have to listen to "Wait, do you mean COLL as in orienting and permuting last layer corners while preserving edge orientation, or just orienting the corners and preserving edge orientation but ignoring all last layer permutation?" every 30 seconds, and you have to say "I don't know, I chose arbitrary visual consistency on some website over internal clarity of naming structure and now I feel nervous and stressed".</p>

			<p>Just like the beginner guide, the rest of the last layer isn't an intuitive thing you can just work out (if you can, you and your mega-brain should probably be working for NASA or something). That's why there's a big scary table of algorithms lurking on the <a href="algorithms.htm">algorithms page</a>, but because we're using our clever 2-look shortcut, you only need to know the following seven. They don't look scary at all, and there's even some triggers in there that you've already seen!</p>

			<div class="alg-table">
				<h5 class="titlebox">OCLL algorithms</h5>
				<div class="alg"><img src="img/cubes/oll_R'_U2_R_U_R'_U_R.png" width="100" height="100"><span class="steps">(<span class="no-margin-left"data-popup="xygyygxyxxxxbbybbyyrrxrrxrr">R'</span>&nbsp;<span data-popup="xyxgyygyxwxybbybbyxxyxrrxrr">U2</span>&nbsp;<span class="no-margin-right"data-popup="xyygyygyywxxbbbbbbxxxrrxrry">R</span>) <span data-popup="ggxyyyyyyxxxbbbbbbxxxrrxrry">U</span>&nbsp;(<span class="no-margin-left"data-popup="ggxyyyyyyxxxbbybbyxxyxrrxrr">R'</span>&nbsp;<span data-popup="yygyygyyxxxybbybbyxrrxrrxrr">U</span>&nbsp;<span class="no-margin-right"data-popup="yyyyyyyyyxxxbbbbbbxxxrrrrrr">R</span>)</span></div>
				<div class="alg"><img src="img/cubes/oll_R_U2_R'_U'_R_U'_R'.png" width="100" height="100"><span class="steps">(<span class="no-margin-left"data-popup="xyxyybxybyxwbbwbbwrryrrxrrx">R</span>&nbsp;<span data-popup="byxbyyxyxxxxbbwbbwyxxrrxrrx">U2</span>&nbsp;<span class="no-margin-right"data-popup="byybyyxyyxxxbbybbxxxxxrryrr">R'</span>) <span data-popup="yyyyyybbxrrybbybbxxxxxrryrr">U'</span>&nbsp;(<span class="no-margin-left"data-popup="yyyyyybbxrrxbbwbbwyxxrrxrrx">R</span>&nbsp;<span data-popup="yyxyybyybxxwbbwbbwrrxrrxrrx">U'</span>&nbsp;<span class="no-margin-right"data-popup="yyyyyyyyyxxxbbbbbbxxxrrrrrr">R'</span>)</span></div>
				<div class="alg"><img src="img/cubes/oll_F'_Rw_U_R'_U'_Rw'_F_R.png" width="100" height="100"><span class="steps"><span data-popup="xyyyyyxrrybbxbbxbbwxxwrrwrr">F'</span>&nbsp;(<span class="red no-margin-left"data-popup="xbbybbxbbyooxwwxwwwwwrrxrrx">r</span>&nbsp;<span class="red" data-popup="xyxbbbbbbwwwxwwxwwrrxrrxrrx">U</span>&nbsp;<span class="red" data-popup="xyybbybbywwxxwbxwbxxxrrrrrr">R'</span>&nbsp;<span class="red no-margin-right"data-popup="yyyybbxbbyooxwbxwbwwxrrrrrr">U'</span>) (<span class="no-margin-left"data-popup="yygyygxxxyyyxbbxbbxrrwrrwrr">r'</span>&nbsp;<span data-popup="yygyygyyxxxybbybbyxrrxrrxrr">F</span>&nbsp;<span class="no-margin-right"data-popup="yyyyyyyyyxxxbbbbbbxxxrrrrrr">R</span>)</span></div>
				<div class="alg"><img src="img/cubes/oll_Rw_U_R'_U'_Rw'_F_R_F'.png" width="100" height="100"><span class="steps">(<span class="red no-margin-left"data-popup="xxxybbxbbywwbwwbwwrrxrrxrrx">r</span>&nbsp;<span class="red" data-popup="xyxbbxbbxrrxbwwbwwyyyrrxrrx">U</span>&nbsp;<span class="red" data-popup="xyybbybbxrrxbwxbwxyxxyrryrr">R'</span>&nbsp;<span class="red no-margin-right"data-popup="yyxybbxbbywwbwxbwxrrxyrryrr">U'</span>) (<span class="blue no-margin-left"data-popup="yygyygxxyyyxbbbbbbxrrrrrryy">r'</span>&nbsp;<span class="blue" data-popup="yygyygooxbbybbybbxxrrxrryyy">F</span>&nbsp;<span class="blue" data-popup="yyyyyyooxbbxbbxbbxyxxyrryrr">R</span>&nbsp;<span class="blue no-margin-right"data-popup="yyyyyyyyyxxxbbbbbbxxxrrrrrr">F'</span>)</span></div>
				<div class="alg"><img src="img/cubes/oll_R_U2_R2'_U'_R2_U'_R2'_U2_R.png" width="100" height="100"><span class="steps"><span data-popup="xyyyybxybxxwbbwbbwrrxrrxrrx">R</span>&nbsp;<span data-popup="byxbyyyyxxxxbbwbbwyxyrrxrrx">U2</span>&nbsp;(<span class="no-margin-left"data-popup="bygbygyyyxxxbbybbxxrrxrryxy">R2'</span>&nbsp;<span data-popup="ggyyyybbyrrxbbybbxxxxxrryxy">U'</span>&nbsp;<span data-popup="ggxyyybbxrrxbbwbbxyxyrrxxxx">R2</span>&nbsp;<span class="no-margin-right"data-popup="xyxgybgybwxwbbwbbxrrxrrxxxx">U'</span>) (<span class="no-margin-left"data-popup="xyygyygyywxxbbybbyxxxxrrxrr">R2'</span>&nbsp;<span data-popup="yygyygyyxxxybbybbyxrrxrrxrr">U2</span>&nbsp;<span class="no-margin-right"data-popup="yyyyyyyyyxxxbbbbbbxxxrrrrrr">R</span>)</span></div>
				<div class="alg"><img src="img/cubes/oll_R_U_R'_U_R_U'_R'_U_R_U2_R'.png" width="100" height="100"><span class="steps">(<span class="no-margin-left"data-popup="xyxyybxybxxwbbwbbwrryrrxrry">R</span>&nbsp;<span data-popup="xyxyyybbxrrybbwbbwxxxrrxrry">U</span>&nbsp;<span class="no-margin-right"data-popup="xyxyyybbyrrxbbybbxxxyxrrxrr">R'</span>) <span data-popup="byxbyyyyxxxybbybbxxxyxrrxrr">U</span>&nbsp;(<span class="no-margin-left"data-popup="byybyyyyxxxybbwbbwxxxrrxrry">R</span>&nbsp;<span data-popup="yyxyyybbyrrxbbwbbwxxyrrxrry">U'</span>&nbsp;<span class="no-margin-right"data-popup="yyxyyybbxrrxbbybbyyxyxrrxrr">R'</span>) <span data-popup="byybyyxyxyxybbybbyxxxxrrxrr">U</span>&nbsp;(<span class="no-margin-left"data-popup="byybyyxyyyxxbbwbbwxxxrrxrrx">R</span>&nbsp;<span data-popup="yyxyybyybxxwbbwbbwrrxrrxrrx">U2</span>&nbsp;<span class="no-margin-right"data-popup="yyyyyyyyyxxxbbbbbbxxxrrrrrr">R'</span>)</span></div>
				<div class="alg"><img src="img/cubes/oll_R2_D_R'_U2_R_D'_R'_U2_R'.png" width="100" height="100"><span class="steps"><span data-popup="yywyywxywyxgbbgbbxrrrrrrxxx">R2</span>&nbsp;<span data-popup="yywyywxywyxgbbgooorrrrrrbbx">D</span>&nbsp;(<span class="no-margin-left"data-popup="yyxyybxybyxwbbwoowrrxrrbrrb">R'</span>&nbsp;<span data-popup="byxbyyxyyyxxbbwoowxxxrrbrrb">U2</span>&nbsp;<span class="no-margin-right"data-popup="byxbywxywyxgbbgooorrxrrxbbx">R</span>) <span data-popup="byxbywxywyxgbbgbbxrrxrrxxxx">D'</span>&nbsp;(<span class="no-margin-left"data-popup="byybyyxyyyxxbbwbbwxxxrrxrrx">R'</span>&nbsp;<span data-popup="yyxyybyybxxwbbwbbwrrxrrxrrx">U2</span>&nbsp;<span class="no-margin-right"data-popup="yyyyyyyyyxxxbbbbbbxxxrrrrrr">R'</span>)</span></div>
			</div>
		</section>

		<section> <h2 id="step5">Step 5 - PLL Corners</h2>
			<p>Now that the OLL is done, you can start PLL. This step is called <strong>CPLL</strong>, as it aims to permute the corners - that is, move them to their correct positions like this:</p>

			<img class="cube" src="img/cubes/yyyyyyyyybxbbbbbbbrxrrrrrrr.png" width="100" height="100">

			<p>To do this, you need to look for 'headlights' - a face where both top layer corners are the same colour (presumably named due to their resemblance to the headlights of a car). In the following example, you can see that the 'headlights' are on the Front face, as the top layer corners are both blue.</p>

			<img class="cube" src="img/headlights.png" width="100" height="100">

			<p>You then hold the headlights so they are facing to the right, and perform this algorithm:</p>

			<div class="alg"><img src="img/cubes/yyyyyyyyyggooooooobrbbbbbbb.png" width="100" height="100"><span class="steps"><span data-popup="ggooooooowwwwwwwwwbbbbbrbbb">x</span>&nbsp;(<span class="no-margin-left"data-popup="ggrooroorwwywwywwybbbrbbbbb">R2</span>&nbsp;<span class="no-margin-right"data-popup="ggrooroorwwywwywyybbbrbbogg">D2</span>) (<span class="no-margin-left"data-popup="ggyooyooywwgwwrwyrorbgbbgbb">R</span>&nbsp;<span data-popup="oogoogyyyorbwwrwyrryygbbgbb">U</span>&nbsp;<span class="no-margin-right"data-popup="oorooryyrorgwwgwyyybbybbrgg">R'</span>) <span data-popup="oorooryyrorgwwgwwyybbybbbbb">D2</span>&nbsp;(<span class="no-margin-left"data-popup="oogoogyyyorowwowwobyybbbbbb">R</span>&nbsp;<span data-popup="ggyooyooywwgwwowwoorobbbbbb">U'</span>&nbsp;<span class="no-margin-right"data-popup="gggoooooowwwwwwwwwbbobbrbbo">R</span>)</span></div>

			<p>The corner pieces should then be permuted correctly in relation to each other - but you might need to turn the top layer so that they are back in the right places.</p>

			<p>Sometimes there are no headlights to be found, like this:</p>

			<img class="cube" src="img/noheadlights.png" width="100" height="100">

			<p>You have two options here. First, you can just use the above algorithm anyway, which will make some headlights for you to solve as above. The second option is this algorithm:</p>

			<div class="alg"><img src="img/cubes/yyyyyyyyygbbbbbbbbrgorrrrrr.png" width="100" height="100"><span class="steps"><span data-popup="yyyyyyoorbbgbbbbbbygoyrryrr">F</span>&nbsp;<span data-popup="yygyyboobbbrbbwbbwyyyrrgrro">R</span>&nbsp;<span data-popup="gbbyyoyyooowbbwbbwbbrrrgrro">U'</span>&nbsp;<span data-popup="gbyyyyyyyoobbbobborgobrrbrr">R'</span>&nbsp;<span data-popup="yyybyygyyrrgbbobbooobbrrbrr">U'</span>&nbsp;<span data-popup="yygbyogyorrwbbwbbwbborrorrb">R</span>&nbsp;<span data-popup="gbyyyyoogbbobbwbbwygorrorrb">U</span>&nbsp;<span data-popup="gbyyyyoobbbybbybbgoobgrryrr">R'</span>&nbsp;<span data-popup="gbyyyyogyyygbbbbbboobrrrrrr">F'</span>&nbsp;(<span class="red no-margin-left"data-popup="gbgyybogbyywbbwbbwrrorrorrb">R</span>&nbsp;<span class="red" data-popup="oyggybbbgrrobbwbbwyyyrrorrb">U</span>&nbsp;<span class="red" data-popup="oyygyybbrrrgbbbbbgyobyrryrr">R'</span>&nbsp;<span class="red no-margin-right"data-popup="yyryybogbyywbbbbbgrrgyrryrr">U'</span>) (<span class="blue no-margin-left"data-popup="yygyygogyyyrbbbbbbgrrrrrryy">R'</span>&nbsp;<span class="blue" data-popup="yygyygoobbbybbybbrorrgrryyy">F</span>&nbsp;<span class="blue" data-popup="yyyyyyoorbbgbbbbbgygoyrryrr">R</span>&nbsp;<span class="blue no-margin-right"data-popup="yyyyyyyyygbgbbbbbbogorrrrrr">F'</span>)</span></div>

			<p>As above, you might now need to turn the top layer to realign the corner pieces. Using this algorithm is preferable than using the first algorithm twice, as it will be much faster to perform. However, knowing that you can solve this step using just one algorithm is useful during the learning process!</p>
		</section>

		<section> <h2 id="step6">Step 6 - PLL Edges</h2>
			<p>This step aims to permute the edge pieces, which by now you have probably worked out is also called <strong>EPLL</strong>. This completes the cube, which you probably know looks like this:</p>

			<img class="cube" src="img/cubes/yyyyyyyyybbbbbbbbbrrrrrrrrr.png" width="100" height="100">

			<p>To start with, you will either have only one correct edge or none at all. If you only have one, then which algorithm you use depends on the direction that the other edges need to be cycled. If they need to move clockwise, then use this algorithm:</p>


			<div class="alg"><img src="img/cubes/pll_R'_U_R'_U'_R'_U'_R'_U_R_U_R2@U5U3-s8,U3U1-s6,U1U5-s6.png" width="100" height="100"><span class="steps">(<span class="no-margin-left"data-popup="yygyygyygbbybbybbyrrrorrrrr">R'</span>&nbsp;<span data-popup="yyyyyygggrrrbbybbywrgorrrrr">U</span>&nbsp;<span data-popup="yywyywggorrybbybbggrrrrrwor">R'</span>&nbsp;<span class="no-margin-right"data-popup="wwoyygyygbbybbybbgrryrrrwor">U'</span>) <span data-popup="wwbyybyygbbobbgbbgyrrrrorrw">R'</span>&nbsp;<span data-popup="bbgwyywyybgobbgbbgbborrorrw">U'</span>&nbsp;(<span class="no-margin-left"data-popup="bbrwyywyybggbbybbyoowbrrbrr">R'</span>&nbsp;<span data-popup="wwbyybyyroowbbybbygrrbrrbrr">U</span>&nbsp;<span class="no-margin-right"data-popup="wwwyyyyyyooobbgbbgbbgrrrrrr">R</span>) <span data-popup="yywyywyywbbgbbgbbgrrrrrrrrr">U</span>&nbsp;<span data-popup="yyyyyyyyybbbbbbbbbrrrrrrrrr">R2</span></span></div>

			<p>And if they need to move anticlockwise, use this algorithm:</p>

			<div class="alg"><img src="img/cubes/pll_R2_U'_R'_U'_R_U_R_U_R_U'_R@U3U5-s8,U5U1-s6,U1U3-s6.png" width="100" height="100"><span class="steps"><span data-popup="yywyywyywbbgbbgbbgrrrrrrrgr">R2</span>&nbsp;<span data-popup="wwwyyyyyyorobbgbbgbbgrrrrgr">U'</span>&nbsp;(<span class="no-margin-left"data-popup="wwbyybyyrorwbbybbygrrbrgbrr">R'</span>&nbsp;<span data-popup="bbrwyywyybogbbybbyorwbrgbrr">U'</span>&nbsp;<span class="no-margin-right"data-popup="bbgwyywyyboobbgbbgbborrrrgw">R</span>) <span data-popup="wwbyybyygbbobbgbbgyrrrrrrgw">U</span>&nbsp;<span data-popup="wwoyygyygbbybbybbgrrygrrwrr">R</span>&nbsp;<span data-popup="yywyywggorrybbybbggrrgrrwrr">U</span>&nbsp;(<span class="no-margin-left"data-popup="yyyyyygggrrrbbybbywggrrrrrr">R</span>&nbsp;<span data-popup="yygyygyygbbybbybbyrrrrrrrrr">U'</span>&nbsp;<span class="no-margin-right"data-popup="yyyyyyyyybbbbbbbbbrrrrrrrrr">R</span>)</span></div>

			<p>If you had no correct edges in your last layer, you can just use one of the above algorithms anyway, like with the corners in the previous step. This will correctly permute one of the edges, allowing you to solve the rest with one more use of the above algorithms.</p>

			<p>There are, however, some more optimal algorithms. If you need to swap opposite edges, you can use this algorithm:</p>

			<div class="alg"><img src="img/cubes/pll_M2_U_M2_U2_M2_U_M2@U1U7-s9,U7U1-s9,U3U5-s9,U5U3-s9.png" width="100" height="100"><span class="steps">(<span class="no-margin-left"data-popup="ywyywyywybgbbgbbbbrorrrrrrr">M2</span>&nbsp;<span data-popup="yyywwwyyyrorbgbbbbgbgrrrrrr">U</span>&nbsp;<span class="no-margin-right"data-popup="yyywywyyyrgrbbbbrbgbgrrrrrr">M2</span>) <span data-popup="yyywywyyyobobbbbrbbgbrrrrrr">U2</span>&nbsp;(<span class="no-margin-left"data-popup="yyywwwyyyooobgbbgbbgbrrrrrr">M2</span>&nbsp;<span data-popup="ywyywyywybgbbgbbgbrrrrrrrrr">U</span>&nbsp;<span class="no-margin-right"data-popup="yyyyyyyyybbbbbbbbbrrrrrrrrr">M2</span>)</span></div>

			<p>And if you need to swap adjacent edges, use this algorithm:</p>

			<div class="alg"><img src="img/cubes/pll_R'_U'_R2_U_R_U_R'_U'_R_U_R_U'_R_U'_R'_U2@U1U3-s9,U3U1-s9,U5U7-s9,U7U5-s9.png" width="100" height="100"><span class="steps"><span data-popup="yygyygyygbrybbybbyrrrbrrrrr">R'</span>&nbsp;<span data-popup="gggyyyyyyogobbybbybrybrrrrr">U'</span>&nbsp;<span data-popup="ggbyybyybogwbbwbbrrrrrrbyrb">R2</span>&nbsp;<span data-popup="yygyygbbbrrrbbwbbryrrrrbyrb">U</span>&nbsp;(<span class="red no-margin-left"data-popup="yyryywbbrrrgbbybbyyryrrrbbr">R</span>&nbsp;<span class="red" data-popup="byybyyrwryrybbybbybogrrrbbr">U</span>&nbsp;<span class="red" data-popup="bygbygrwoyrybbybbrgrrorbbrb">R'</span>&nbsp;<span class="red no-margin-right"data-popup="ggoyywbbrrrgbbybbryryorbbrb">U'</span>) <span data-popup="gggyyybbrrrybbybbyboyrrrbby">R</span>&nbsp;<span data-popup="bygbygrygboybbybbyrrrrrrbby">U</span>&nbsp;<span data-popup="byybyyryyboobbybbgbrrbrryrr">R</span>&nbsp;<span data-popup="yyyyyybbrrrybbybbgboobrryrr">U'</span>&nbsp;<span data-popup="yyyyyybbgrrobbwbbwybbrrorro">R</span>&nbsp;<span data-popup="yygyybyybggwbbwbbwrrorrorro">U'</span>&nbsp;<span data-popup="yyyyyyyyygggbbbbbbooorrrrrr">R'</span>&nbsp;<span data-popup="yyyyyyyyybbbbbbbbbrrrrrrrrr">U2</span></span></div>

			<p>And that's it! You solved a Rubik's Cube using the CFOP method!</p>

			<p>Congratulations!</p>
		</section>

		<section><h2>Transitioning to full CFOP</h2>
			<p>I would recommend that you keep using the 2-look algorithms until you feel confident with most of this speedcubing guide. You will have to rely on them in practically every solve until you learn every other OLL and PLL algorithm, which will take you some time and effort. As you practise incorporating the techniques on this page into your solves, you will learn to recognise the various other OLL and PLL situations, which will help immensely in their memorisation.</p>

			<p>Mostly, people learn 1-look PLL before 1-look OLL, as there are fewer of them to learn and they are more easily identified. Start using the <a href="algorithms.htm#pll">algorithms page</a> to learn each of the PLL algorithms. You can do this in whatever order you choose but I have arranged them in what I think is a sensible order to learn them - I have grouped similar algorithms, and put what I think are the easier ones first.</p>

			<p>Once you have learned a few more PLL algorithms, you can start learning OLL. The <a href="algorithms.htm#oll">algorithm page</a> has each OLL algorithm ordered by the shape they resemble, so you can find which situation you need easily. You can also order the table by trigger, which I think is much more conducive to memorisation. Once you know the first trigger, you almost know 22 OLL algorithms straight away - that's about 40% already! Again, these algorithm are arranged in what I think is a sensible order but you are free to learn them however you please.</p>

			<p>It is worth knowing that each and every F2L, OLL, and PLL situation have many, many different algorithms that can solve them. I have gone through each of these situations and chosen algorithms that I think are easy to both perform and learn, but you may feel differently. Fortunately, there is a <a href="https://www.speedsolving.com/wiki/index.php/Special:MediawikiAlgDB?mode=view&amp;view=default&amp;puzzle=3&amp;group=OLL">huge algorithm database</a> for your perusal, where you can find the perfect algorithms for you. This database is part of the <a href="https://www.speedsolving.com/wiki/index.php/Main_Page">speedsolving.com wiki</a>, which has a wealth of information about everything speedcubing related.</p>

			<p>I sincerely hope that you have enjoyed this introduction to speedcubing, a hobby that I and many others enjoy very much. Why not see how well you can do with the <a href="timer.htm">timer</a>, and please do <a href="contact.htm">get in touch</a> if you have anything you'd like to say, or leave a comment below!</p>
		</section>

		<!-- Responsive Ad -->
		<ins class="adsbygoogle"
		     style="display:block"
		     data-ad-client="ca-pub-9188691407769749"
		     data-ad-slot="7797180701"
		     data-ad-format="auto"
		     data-ad-format="horizontal"></ins>
		<script>
		(adsbygoogle = window.adsbygoogle || []).push({});
		</script>
	</div>
</div>

<div class="disqus">
	<div class="row">
		<div class="small-10 small-centered columns">
			<div id="disqus_thread"></div>
			<script>
				/**
				 *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
				 *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables
				 */
				/*
				var disqus_config = function () {
					this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
					this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
				};
				*/
				(function() {  // DON'T EDIT BELOW THIS LINE
					var d = document, s = d.createElement('script');

					s.src = '//solvethecube.disqus.com/embed.js';

					s.setAttribute('data-timestamp', +new Date());
					(d.head || d.body).appendChild(s);
				})();
			</script>
			<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>
		</div>
	</div>
</div><div class="footer ">
	<div class="row">
		<div class="small-12 columns">

			<img src="img/logo.png" width="40" height="46" alt="SolveTheCube">

			<ul id="sitemap">
				<li><a href="solvethecube_default_2.html">Beginners</a></li>
				<li><a href="speedcubing.htm">Speedcubing</a></li>
				<li><a href="algorithms.htm">Algorithms</a></li>
				<li><a href="timer.htm">Timer</a></li>
				<li><a href="https://solvethecube.com/notation.htm">Notation</a></li>
				<li><a href="https://solvethecube.com/faq.htm">FAQ</a></li>
				<li><a href="https://solvethecube.com/contact.htm">Contact</a></li>
			</ul>

			<div id="copyright">Copyright &copy; 2018 SolveTheCube.com</div>

		</div>
	</div>
</div>

</div>

<div id="topbutton">
	<i class="fa fa-chevron-up"></i>
</div>

<div id="popup">
	<span></span>
	<img src="https://solvethecube.com/speedcubing.htm" width="100" height="100">
</div>

<script src="js/commons.js"></script>
<script src="js/app.js"></script>
<script type="text/javascript" src="https://s7.addthis.com/js/300/addthis_widget.js#pubid=ra-5734f19e19fbb891"></script>

</body>
</html>
